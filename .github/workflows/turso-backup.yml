name: Daily Turso Database Backup

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  backup-database:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Create backup directory
        run: mkdir -p database-backups

      - name: Get current timestamp
        id: timestamp
        run: |
          echo "timestamp=$(date -u '+%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
          echo "iso_timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "db_safe_timestamp=$(date -u '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Debug and validate API token
        id: org_info
        run: |
          echo "Debugging API token..."

          if [ -z "${{ secrets.TURSO_API_TOKEN }}" ]; then
            echo "TURSO_API_TOKEN secret is empty or not set!"
            exit 1
          fi

          TOKEN="${{ secrets.TURSO_API_TOKEN }}"
          TOKEN_LENGTH=${#TOKEN}
          echo "Token length: $TOKEN_LENGTH characters"

          # Clean the token
          CLEAN_TOKEN=$(echo "$TOKEN" | tr -d ' \n\r\t')
          TOKEN="$CLEAN_TOKEN"

          # Validate JWT format
          DOT_COUNT=$(echo "$TOKEN" | tr -cd '.' | wc -c)
          echo "JWT dot count: $DOT_COUNT (should be 2)"

          if [ "$DOT_COUNT" != "2" ]; then
            echo "Token format is invalid"
            exit 1
          fi

          # Test API token
          echo "Testing API token..."
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            https://api.turso.tech/v1/auth/validate)

          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Token validation failed"
            echo "Try creating a new token with: turso auth api-tokens create github-backup"
            exit 1
          fi

          # Get organization
          echo "Getting organization info..."
          ORG_RESPONSE=$(curl -s \
            -H "Authorization: Bearer $TOKEN" \
            https://api.turso.tech/v1/current-user)

          echo "Org response: $ORG_RESPONSE"

          ORG_NAME=$(echo "$ORG_RESPONSE" | grep -o '"username":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$ORG_NAME" ]; then
            echo "Failed to get organization name"
            exit 1
          fi

          echo "Organization: $ORG_NAME"
          echo "org_name=$ORG_NAME" >> $GITHUB_OUTPUT

      - name: Create temporary backup database
        id: create_backup
        run: |
          BACKUP_DB_NAME="backup-temp-${{ steps.timestamp.outputs.db_safe_timestamp }}"
          echo "BACKUP_DB_NAME=$BACKUP_DB_NAME" >> $GITHUB_ENV

          echo "Creating backup database: $BACKUP_DB_NAME"

          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"$BACKUP_DB_NAME\",\"group\":\"default\",\"seed\":{\"type\":\"database\",\"name\":\"${{ vars.TURSO_DATABASE_NAME }}\",\"timestamp\":\"${{ steps.timestamp.outputs.iso_timestamp }}\"}}" \
            https://api.turso.tech/v1/organizations/${{ steps.org_info.outputs.org_name }}/databases)

          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

          echo "Create DB HTTP Code: $HTTP_CODE"
          echo "Create DB Response: $BODY"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Failed to create backup database"
            exit 1
          fi

          HOSTNAME=$(echo "$BODY" | grep -o '"Hostname":"[^"]*"' | cut -d'"' -f4)
          echo "backup_hostname=$HOSTNAME" >> $GITHUB_OUTPUT

      - name: Wait for database
        run: sleep 30

      - name: Create database token
        id: db_token
        run: |
          echo "Creating database token..."

          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            https://api.turso.tech/v1/organizations/${{ steps.org_info.outputs.org_name }}/databases/$BACKUP_DB_NAME/auth/tokens)

          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

          echo "Token HTTP Code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Failed to create database token"
            exit 1
          fi

          DB_TOKEN=$(echo "$BODY" | grep -o '"jwt":"[^"]*"' | cut -d'"' -f4)
          echo "db_token=$DB_TOKEN" >> $GITHUB_OUTPUT

      - name: Setup Node.js and install dependencies
        run: |
          # Initialize a package.json and install libsql client locally
          npm init -y
          npm install @libsql/client
          echo "Installed libsql client"

          # Verify installation
          npm list @libsql/client

      - name: Create backup script
        run: |
          cat > backup_script.js << 'EOF'
          const { createClient } = require('@libsql/client');
          const fs = require('fs');

          async function createBackup() {
            const client = createClient({
              url: process.env.BACKUP_DB_URL,
              authToken: process.env.BACKUP_DB_TOKEN
            });
            
            try {
              const tables = await client.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");
              
              let sqlDump = "PRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n\n";
              
              for (const table of tables.rows) {
                const tableName = table.name;
                
                const schema = await client.execute(`SELECT sql FROM sqlite_master WHERE type='table' AND name='${tableName}'`);
                if (schema.rows.length > 0) {
                  sqlDump += schema.rows[0].sql + ";\n\n";
                }
                
                const data = await client.execute(`SELECT * FROM ${tableName}`);
                
                if (data.rows.length > 0) {
                  for (const row of data.rows) {
                    const columns = Object.keys(row);
                    const values = columns.map(col => {
                      const val = row[col];
                      if (val === null) return 'NULL';
                      if (typeof val === 'string') return `'${val.replace(/'/g, "''")}'`;
                      return val;
                    });
                    
                    sqlDump += `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${values.join(', ')});\n`;
                  }
                  sqlDump += "\n";
                }
              }
              
              sqlDump += "COMMIT;\n";
              
              fs.writeFileSync(process.env.SQL_DUMP_FILE, sqlDump);
              console.log(`SQL dump created: ${process.env.SQL_DUMP_FILE}`);
              
            } catch (error) {
              console.error('Error creating backup:', error);
              process.exit(1);
            } finally {
              client.close();
            }
          }

          createBackup();
          EOF

      - name: Create SQL dump
        run: |
          export BACKUP_DB_URL="libsql://${{ steps.create_backup.outputs.backup_hostname }}"
          export BACKUP_DB_TOKEN="${{ steps.db_token.outputs.db_token }}"
          export SQL_DUMP_FILE="database-backups/backup_${{ steps.timestamp.outputs.timestamp }}.sql"

          echo "SQL_DUMP_FILE=$SQL_DUMP_FILE" >> $GITHUB_ENV

          node backup_script.js

      - name: Compress backup
        run: |
          gzip "$SQL_DUMP_FILE"
          echo "Compressed backup created"

      - name: Clean up temporary database
        run: |
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            https://api.turso.tech/v1/organizations/${{ steps.org_info.outputs.org_name }}/databases/$BACKUP_DB_NAME

          echo "Temporary database deleted"

      - name: Create backup metadata
        run: |
          cat > database-backups/backup_${{ steps.timestamp.outputs.timestamp }}_metadata.json << EOF
          {
            "timestamp": "${{ steps.timestamp.outputs.timestamp }}",
            "iso_timestamp": "${{ steps.timestamp.outputs.iso_timestamp }}",
            "source_database": "${{ vars.TURSO_DATABASE_NAME }}",
            "backup_files": ["backup_${{ steps.timestamp.outputs.timestamp }}.sql.gz"],
            "created_by": "github-actions",
            "workflow_run": "${{ github.run_id }}",
            "organization": "${{ steps.org_info.outputs.org_name }}"
          }
          EOF

      - name: Clean up old backups
        run: |
          find database-backups -name "backup_*.sql.gz" -mtime +30 -delete || true
          find database-backups -name "backup_*_metadata.json" -mtime +30 -delete || true

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push backup files
        run: |
          git add database-backups/

          if git diff --staged --quiet; then
            echo "No new backup files to commit"
            exit 0
          fi

          git commit -m "Database backup - ${{ steps.timestamp.outputs.timestamp }}"

          # Push with proper authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.ref_name }}
