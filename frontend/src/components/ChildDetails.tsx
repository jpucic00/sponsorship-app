// File: src/components/ChildDetails.tsx
import React, { useState, useEffect } from "react";
import {
  ArrowLeft,
  Edit,
  Calendar,
  GraduationCap,
  Heart,
  Users,
  User,
  Phone,
  Home,
  FileText,
  Camera,
  UserCheck,
  Clock,
  MapPin,
  Plus,
  X,
  DollarSign,
  CreditCard,
} from "lucide-react";
import { PhotoGallery } from "./PhotoGallery";
// Import the date utility functions
import {
  formatDateTime,
  formatDate,
  formatDateTimeWithRelative,
} from "../utils/dateUtils";

interface Child {
  id: number;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  gender: string;
  class: string;
  isSponsored: boolean;
  fatherFullName: string;
  fatherAddress?: string;
  fatherContact?: string;
  motherFullName: string;
  motherAddress?: string;
  motherContact?: string;
  story?: string;
  comment?: string;
  // Only keep image fields, remove photoUrl
  photoBase64?: string;
  photoMimeType?: string;
  photoFileName?: string;
  photoSize?: number;
  photoDataUrl?: string; // Generated by backend
  dateEnteredRegister: string;
  lastProfileUpdate: string;
  school: {
    id: number;
    name: string;
    location: string;
  };
  sponsorships: Array<{
    id: number;
    monthlyAmount?: number;
    paymentMethod?: string;
    startDate: string;
    endDate?: string;
    notes?: string;
    isActive: boolean;
    sponsor: {
      id: number;
      fullName: string;
      contact: string;
      proxy?: {
        fullName: string;
        role: string;
      };
    };
  }>;
}

interface ChildDetailsProps {
  childId: number;
  onBack: () => void;
}

export const ChildDetails: React.FC<ChildDetailsProps> = ({
  childId,
  onBack,
}) => {
  const [child, setChild] = useState<Child | null>(null);
  const [loading, setLoading] = useState(true);
  const [showAddSponsor, setShowAddSponsor] = useState(false);
  const [availableSponsors, setAvailableSponsors] = useState<any[]>([]);
  const [imageError, setImageError] = useState(false);

  useEffect(() => {
    fetchChildDetails(childId);
    fetchAvailableSponsors();
  }, [childId]);

  const fetchChildDetails = async (id: number) => {
    try {
      const response = await fetch(`/api/children/${id}`);
      if (response.ok) {
        const data = await response.json();
        setChild(data);
        setImageError(false);
      } else {
        console.error("Failed to fetch child details");
      }
    } catch (error) {
      console.error("Error fetching child details:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleProfilePhotoChange = () => {
    // Refresh child details when profile photo changes
    fetchChildDetails(childId);
  };

  const fetchAvailableSponsors = async () => {
    try {
      const response = await fetch("/api/sponsors");
      if (response.ok) {
        const data = await response.json();
        setAvailableSponsors(data.data || data || []);
      }
    } catch (error) {
      console.error("Error fetching sponsors:", error);
    }
  };

  const handleAddSponsor = async (sponsorId: number) => {
    try {
      const response = await fetch(`/api/children/${childId}/sponsors`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ sponsorId }),
      });

      if (response.ok) {
        await fetchChildDetails(childId);
        setShowAddSponsor(false);
      } else {
        const error = await response.json();
        alert(error.error || "Failed to add sponsor");
      }
    } catch (error) {
      console.error("Error adding sponsor:", error);
      alert("Failed to add sponsor");
    }
  };

  const handleRemoveSponsor = async (sponsorId: number) => {
    if (confirm("Are you sure you want to end this sponsorship?")) {
      try {
        const response = await fetch(
          `/api/children/${childId}/sponsors/${sponsorId}`,
          {
            method: "DELETE",
          }
        );

        if (response.ok) {
          await fetchChildDetails(childId);
        } else {
          alert("Failed to end sponsorship");
        }
      } catch (error) {
        console.error("Error ending sponsorship:", error);
        alert("Failed to end sponsorship");
      }
    }
  };

  const calculateAge = (dateOfBirth: string) => {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birthDate.getDate())
    ) {
      age--;
    }

    return age;
  };

  // Function to get the image source
  const getImageSrc = (child: Child) => {
    // Priority: photoDataUrl (from backend) > photoBase64 + mimeType > dedicated image endpoint
    if (child.photoDataUrl) {
      return child.photoDataUrl;
    }
    if (child.photoBase64 && child.photoMimeType) {
      return `data:${child.photoMimeType};base64,${child.photoBase64}`;
    }
    // Fallback to dedicated image endpoint
    return `/api/children/${child.id}/image`;
  };

  const hasImage = (child: Child) => {
    return !!(child.photoDataUrl || child.photoBase64 || child.photoMimeType);
  };

  const handleImageError = () => {
    setImageError(true);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex justify-center items-center">
        <div className="flex flex-col items-center space-y-4">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600"></div>
          <p className="text-gray-600 font-medium">Loading child details...</p>
        </div>
      </div>
    );
  }

  if (!child) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Child Not Found
          </h2>
          <p className="text-gray-600 mb-6">
            The requested child could not be found.
          </p>
          <button
            onClick={onBack}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Back to Children List
          </button>
        </div>
      </div>
    );
  }

  const activeSponsors = child.sponsorships.filter((s) => s.isActive);
  const inactiveSponsors = child.sponsorships.filter((s) => !s.isActive);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={onBack}
            className="flex items-center space-x-2 text-blue-600 hover:text-blue-800 font-medium mb-4 transition-colors"
          >
            <ArrowLeft size={20} />
            <span>Back to Children List</span>
          </button>

          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-gray-900 mb-2">
                {child.firstName} {child.lastName}
              </h1>
              <div className="flex items-center space-x-4">
                <span
                  className={`inline-flex items-center px-3 py-1 text-sm font-semibold rounded-full ${
                    child.isSponsored
                      ? "bg-green-100 text-green-800"
                      : "bg-yellow-100 text-yellow-800"
                  }`}
                >
                  {child.isSponsored ? "✅ Sponsored" : "⏳ Needs Sponsor"}
                </span>
                <span className="text-gray-600">
                  {calculateAge(child.dateOfBirth)} years old • {child.gender}
                </span>
                {activeSponsors.length > 1 && (
                  <span className="bg-purple-100 text-purple-800 px-3 py-1 text-sm font-semibold rounded-full">
                    {activeSponsors.length} Active Sponsors
                  </span>
                )}
              </div>
            </div>

            <button
              onClick={() => (window.location.href = `/edit-child/${child.id}`)}
              className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors"
            >
              <Edit size={20} />
              <span>Edit Details</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Photo and Basic Info */}
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8">
              <div className="flex flex-col md:flex-row items-start space-y-6 md:space-y-0 md:space-x-8">
                <div className="flex-shrink-0">
                  {!imageError && hasImage(child) ? (
                    <img
                      src={getImageSrc(child)}
                      alt={`${child.firstName} ${child.lastName}`}
                      className="w-40 h-40 rounded-2xl object-cover border-4 border-white shadow-lg"
                      onError={handleImageError}
                    />
                  ) : (
                    <div className="w-40 h-40 bg-gradient-to-br from-blue-500 to-purple-500 rounded-2xl flex items-center justify-center border-4 border-white shadow-lg">
                      <Camera className="text-white" size={48} />
                    </div>
                  )}
                  {hasImage(child) && !imageError && (
                    <div className="mt-2 text-center">
                      <span className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                        <Camera size={12} className="mr-1" />
                        Photo Available
                      </span>
                    </div>
                  )}
                </div>

                <div className="flex-1 space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-blue-50 p-4 rounded-xl border border-blue-200">
                      <div className="flex items-center space-x-2 mb-2">
                        <Calendar className="text-blue-600" size={18} />
                        <span className="font-semibold text-blue-700">
                          Date of Birth
                        </span>
                      </div>
                      <p className="text-gray-900">
                        {formatDate(child.dateOfBirth)}
                        <span className="text-gray-600 ml-2">
                          ({calculateAge(child.dateOfBirth)} years old)
                        </span>
                      </p>
                    </div>

                    <div className="bg-purple-50 p-4 rounded-xl border border-purple-200">
                      <div className="flex items-center space-x-2 mb-2">
                        <GraduationCap className="text-purple-600" size={18} />
                        <span className="font-semibold text-purple-700">
                          Class
                        </span>
                      </div>
                      <p className="text-gray-900">{child.class}</p>
                    </div>

                    <div className="bg-green-50 p-4 rounded-xl border border-green-200">
                      <div className="flex items-center space-x-2 mb-2">
                        <GraduationCap className="text-green-600" size={18} />
                        <span className="font-semibold text-green-700">
                          School
                        </span>
                      </div>
                      <p className="text-gray-900 font-medium">
                        {child.school.name}
                      </p>
                      <div className="flex items-center space-x-1 mt-1">
                        <MapPin className="text-gray-500" size={14} />
                        <p className="text-gray-600 text-sm">
                          {child.school.location}
                        </p>
                      </div>
                    </div>

                    <div className="bg-orange-50 p-4 rounded-xl border border-orange-200">
                      <div className="flex items-center space-x-2 mb-2">
                        <Calendar className="text-orange-600" size={18} />
                        <span className="font-semibold text-orange-700">
                          Registered
                        </span>
                      </div>
                      <div className="space-y-1">
                        <p className="text-gray-900 font-medium">
                          {formatDateTime(child.dateEnteredRegister)}
                        </p>
                        <p className="text-gray-500 text-sm">
                          {
                            formatDateTimeWithRelative(
                              child.dateEnteredRegister
                            ).relative
                          }
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Rest of the component remains the same - Story, Family Info, etc. */}
            {/* Story */}
            {child.story && (
              <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8">
                <div className="flex items-center space-x-3 mb-6">
                  <FileText className="text-blue-600" size={28} />
                  <h2 className="text-2xl font-bold text-gray-900">
                    Child's Story
                  </h2>
                </div>
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                  <p className="text-gray-800 leading-relaxed">{child.story}</p>
                </div>
              </div>
            )}

            {/* Volunteer Comments */}
            {child.comment && (
              <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8">
                <div className="flex items-center space-x-3 mb-6">
                  <Users className="text-purple-600" size={28} />
                  <h2 className="text-2xl font-bold text-gray-900">
                    Volunteer Comments
                  </h2>
                </div>
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-6 border border-purple-200">
                  <p className="text-gray-800 leading-relaxed">
                    {child.comment}
                  </p>
                </div>
              </div>
            )}

            {/* Family Information */}
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8">
              <div className="flex items-center space-x-3 mb-6">
                <Users className="text-green-600" size={28} />
                <h2 className="text-2xl font-bold text-gray-900">Family</h2>
              </div>

              <div className="space-y-6">
                {/* Father Info */}
                <div className="bg-blue-50 p-4 rounded-xl border border-blue-200">
                  <div className="flex items-center space-x-2 mb-3">
                    <User className="text-blue-600" size={18} />
                    <span className="font-semibold text-blue-700">Father</span>
                  </div>
                  <p className="text-gray-900 font-medium mb-2">
                    {child.fatherFullName}
                  </p>

                  {child.fatherAddress && (
                    <div className="flex items-start space-x-2 mb-2">
                      <Home className="text-gray-500 mt-1" size={14} />
                      <p className="text-gray-700 text-sm">
                        {child.fatherAddress}
                      </p>
                    </div>
                  )}

                  {child.fatherContact && (
                    <div className="flex items-start space-x-2">
                      <Phone className="text-gray-500 mt-1" size={14} />
                      <p className="text-gray-700 text-sm break-words">
                        {child.fatherContact}
                      </p>
                    </div>
                  )}
                </div>

                {/* Mother Info */}
                <div className="bg-pink-50 p-4 rounded-xl border border-pink-200">
                  <div className="flex items-center space-x-2 mb-3">
                    <User className="text-pink-600" size={18} />
                    <span className="font-semibold text-pink-700">Mother</span>
                  </div>
                  <p className="text-gray-900 font-medium mb-2">
                    {child.motherFullName}
                  </p>

                  {child.motherAddress && (
                    <div className="flex items-start space-x-2 mb-2">
                      <Home className="text-gray-500 mt-1" size={14} />
                      <p className="text-gray-700 text-sm">
                        {child.motherAddress}
                      </p>
                    </div>
                  )}

                  {child.motherContact && (
                    <div className="flex items-start space-x-2">
                      <Phone className="text-gray-500 mt-1" size={14} />
                      <p className="text-gray-700 text-sm break-words">
                        {child.motherContact}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Photo Gallery */}
            <PhotoGallery
              childId={child.id}
              childName={`${child.firstName} ${child.lastName}`}
              onProfilePhotoChange={handleProfilePhotoChange}
            />
          </div>

          {/* Sidebar - Sponsorship and other info */}
          <div className="space-y-8">
            {/* Sponsorship Info */}
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <Heart className="text-red-500" size={28} />
                  <h2 className="text-2xl font-bold text-gray-900">
                    Sponsorships
                  </h2>
                </div>
                <button
                  onClick={() => setShowAddSponsor(true)}
                  className="flex items-center space-x-1 px-3 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Plus size={16} />
                  <span>Add Sponsor</span>
                </button>
              </div>

              {activeSponsors.length > 0 ? (
                <div className="space-y-4">
                  {activeSponsors.map((sponsorship) => (
                    <div
                      key={sponsorship.id}
                      className="bg-green-50 rounded-2xl p-6 border border-green-200"
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div>
                          <div className="flex items-center space-x-2 mb-2">
                            <UserCheck className="text-green-600" size={18} />
                            <span className="font-semibold text-green-700">
                              Active Sponsor
                            </span>
                          </div>
                          <p className="text-gray-900 font-bold">
                            {sponsorship.sponsor.fullName}
                          </p>
                          {sponsorship.sponsor.proxy && (
                            <p className="text-purple-600 text-sm mt-1">
                              Via: {sponsorship.sponsor.proxy.fullName} (
                              {sponsorship.sponsor.proxy.role})
                            </p>
                          )}
                        </div>
                        <button
                          onClick={() =>
                            handleRemoveSponsor(sponsorship.sponsor.id)
                          }
                          className="text-red-600 hover:text-red-800 p-1"
                          title="End sponsorship"
                        >
                          <X size={18} />
                        </button>
                      </div>

                      <div className="grid grid-cols-1 gap-3">
                        <div className="bg-white p-3 rounded-lg border border-green-200">
                          <div className="flex items-center space-x-2 mb-1">
                            <Calendar className="text-green-600" size={16} />
                            <span className="text-sm font-semibold text-green-700">
                              Since
                            </span>
                          </div>
                          <div className="space-y-1">
                            <p className="text-gray-900 font-medium">
                              {formatDateTime(sponsorship.startDate)}
                            </p>
                            <p className="text-gray-600 text-sm">
                              {
                                formatDateTimeWithRelative(
                                  sponsorship.startDate
                                ).relative
                              }
                            </p>
                          </div>
                        </div>

                        {sponsorship.monthlyAmount && (
                          <div className="bg-white p-3 rounded-lg border border-green-200">
                            <div className="flex items-center space-x-2 mb-1">
                              <DollarSign
                                className="text-green-600"
                                size={16}
                              />
                              <span className="text-sm font-semibold text-green-700">
                                Monthly Amount
                              </span>
                            </div>
                            <p className="text-gray-900 font-bold">
                              ${sponsorship.monthlyAmount}
                            </p>
                            {sponsorship.paymentMethod && (
                              <p className="text-gray-600 text-sm">
                                via {sponsorship.paymentMethod}
                              </p>
                            )}
                          </div>
                        )}

                        <div className="bg-white p-3 rounded-lg border border-green-200">
                          <div className="flex items-center space-x-2 mb-1">
                            <Phone className="text-green-600" size={16} />
                            <span className="text-sm font-semibold text-green-700">
                              Contact
                            </span>
                          </div>
                          <p className="text-gray-900 text-sm break-words">
                            {sponsorship.sponsor.contact}
                          </p>
                        </div>

                        {sponsorship.notes && (
                          <div className="bg-white p-3 rounded-lg border border-green-200">
                            <div className="flex items-center space-x-2 mb-1">
                              <FileText className="text-green-600" size={16} />
                              <span className="text-sm font-semibold text-green-700">
                                Notes
                              </span>
                            </div>
                            <p className="text-gray-800 text-sm">
                              {sponsorship.notes}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <div className="text-6xl mb-4">💝</div>
                  <p className="text-gray-600 mb-4">
                    This child needs a sponsor
                  </p>
                  <button
                    onClick={() => setShowAddSponsor(true)}
                    className="px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-xl hover:from-purple-700 hover:to-purple-800 transition-all"
                  >
                    Find Sponsor
                  </button>
                </div>
              )}

              {/* Previous Sponsors */}
              {inactiveSponsors.length > 0 && (
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">
                    Previous Sponsors ({inactiveSponsors.length})
                  </h3>
                  <div className="space-y-2">
                    {inactiveSponsors.map((sponsorship) => (
                      <div
                        key={sponsorship.id}
                        className="bg-gray-50 p-3 rounded-lg border border-gray-200"
                      >
                        <p className="font-medium text-gray-900">
                          {sponsorship.sponsor.fullName}
                        </p>
                        <p className="text-sm text-gray-600">
                          {formatDateTime(sponsorship.startDate)} -{" "}
                          {sponsorship.endDate
                            ? formatDateTime(sponsorship.endDate)
                            : "Ended"}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Last Updated */}
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg border border-white/20 p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Clock className="text-gray-600" size={20} />
                <h3 className="text-lg font-bold text-gray-900">
                  Last Updated
                </h3>
              </div>
              <div className="space-y-2">
                <div className="text-gray-700 font-medium">
                  {formatDateTime(child.lastProfileUpdate)}
                </div>
                <div className="text-gray-500 text-sm">
                  {formatDateTimeWithRelative(child.lastProfileUpdate).relative}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Add Sponsor Modal */}
        {showAddSponsor && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900">
                  Add Sponsor to {child.firstName} {child.lastName}
                </h3>
                <button
                  onClick={() => setShowAddSponsor(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X size={24} />
                </button>
              </div>

              <div className="space-y-4">
                {availableSponsors
                  .filter(
                    (sponsor) =>
                      !activeSponsors.some((s) => s.sponsor.id === sponsor.id)
                  )
                  .map((sponsor) => (
                    <div
                      key={sponsor.id}
                      className="p-4 border border-gray-200 rounded-xl hover:border-green-300 hover:bg-green-50 cursor-pointer transition-all"
                      onClick={() => handleAddSponsor(sponsor.id)}
                    >
                      <h4 className="font-bold text-gray-900">
                        {sponsor.fullName}
                      </h4>
                      <p className="text-gray-600 text-sm mt-1">
                        {sponsor.contact}
                      </p>
                      {sponsor.proxy && (
                        <p className="text-purple-600 text-sm mt-1">
                          Via: {sponsor.proxy.fullName} ({sponsor.proxy.role})
                        </p>
                      )}
                    </div>
                  ))}
              </div>

              {availableSponsors.filter(
                (sponsor) =>
                  !activeSponsors.some((s) => s.sponsor.id === sponsor.id)
              ).length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <p>No available sponsors found</p>
                  <p className="text-sm mt-2">
                    All sponsors are already sponsoring this child or no
                    sponsors exist.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
