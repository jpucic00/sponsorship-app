generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // will be ignored
}

model Child {
  id                    Int      @id @default(autoincrement())
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                String   // Male/Female
  schoolId              Int
  class                 String   // P1-P7, S1-S6
  
  // Father information
  fatherFullName        String
  fatherAddress         String?
  fatherContact         String?  // Freetext: phone, email, address etc
  
  // Mother information
  motherFullName        String
  motherAddress         String?
  motherContact         String?  // Freetext: phone, email, address etc
  
  // Child details
  story                 String?  // Story about the child
  comment               String?  // Volunteer comments
  
  // Tracking dates
  dateEnteredRegister   DateTime @default(now())
  lastProfileUpdate     DateTime @default(now())
  
  // System fields
  isSponsored           Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  school                School   @relation(fields: [schoolId], references: [id])
  sponsorships          Sponsorship[]
  photos                ChildPhoto[]  // All photos for this child
  
  // Performance Indexes
  @@index([schoolId])                           // Foreign key index (auto-created in some DBs)
  @@index([isSponsored])                        // Filter by sponsorship status
  @@index([class])                              // Filter by school class
  @@index([gender])                             // Filter by gender
  @@index([dateOfBirth])                        // Age-based queries, sorting
  @@index([lastName, firstName])                // Name searches (surname first)
  @@index([schoolId, class])                    // School + class combinations
  @@index([schoolId, isSponsored])              // Available children per school
  @@index([isSponsored, dateEnteredRegister])   // Unsponsored children by date
  @@index([createdAt])                          // Recent additions
  @@index([lastProfileUpdate])                  // Recently updated profiles
  
  @@map("children")
}

model ChildPhoto {
  id          Int      @id @default(autoincrement())
  childId     Int
  photoBase64 String   // Base64 encoded image data
  mimeType    String   // Image MIME type
  fileName    String?  // Original filename
  fileSize    Int?     // File size in bytes
  description String?  // Optional description/caption
  uploadedAt  DateTime @default(now())
  isProfile   Boolean  @default(false) // Latest photo is marked as profile
  
  // Relations
  child       Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  // Performance Indexes
  @@index([childId])                    // Foreign key index
  @@index([childId, isProfile])         // Find profile photo for child
  @@index([childId, uploadedAt])        // Photos by upload date per child
  @@index([isProfile])                  // All profile photos
  @@index([uploadedAt])                 // Recent uploads
  
  @@map("child_photos")
}

model School {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  location String?
  isActive Boolean  @default(true)
  
  children Child[]
  
  // Performance Indexes
  @@index([isActive])           // Filter active schools
  @@index([name])               // Name searches (unique constraint serves as index)
  @@index([location])           // Location-based queries
  
  @@map("schools")
}

// Updated Sponsor and Proxy models with email and phone fields

model Sponsor {
  id                Int      @id @default(autoincrement())
  fullName          String
  contact           String   // Freetext: phone, email, address etc (kept for backward compatibility)
  email             String?  // NEW: Separate email field
  phone             String?  // NEW: Separate phone number field
  proxyId           Int?     // Optional middleman/proxy
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  proxy             Proxy?   @relation(fields: [proxyId], references: [id])
  sponsorships      Sponsorship[]
  
  // Performance Indexes
  @@index([proxyId])            // Foreign key index
  @@index([fullName])           // Name searches
  @@index([createdAt])          // Recent sponsors
  @@index([proxyId, fullName])  // Sponsors by proxy
  @@index([email])              // Email searches
  @@index([phone])              // Phone searches
  
  @@map("sponsors")
}

model Proxy {
  id          Int      @id @default(autoincrement())
  fullName    String   @unique
  contact     String   // Contact information (kept for backward compatibility)
  email       String?  // NEW: Separate email field
  phone       String?  // NEW: Separate phone number field
  role        String?  // e.g., "Priest", "Community Leader", etc.
  description String?  // Additional info about the proxy
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sponsors    Sponsor[]
  
  @@index([createdAt])          // Recent proxies
  @@index([email])              // Email searches
  @@index([phone])              // Phone searches
  
  @@map("proxies")
}

model Sponsorship {
  id              Int      @id @default(autoincrement())
  childId         Int
  sponsorId       Int
  startDate       DateTime @default(now())
  endDate         DateTime?
  monthlyAmount   Float?
  paymentMethod   String?
  isActive        Boolean  @default(true)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  child   Child   @relation(fields: [childId], references: [id])
  sponsor Sponsor @relation(fields: [sponsorId], references: [id])
  
  // Performance Indexes
  @@index([childId])                    // Foreign key index
  @@index([sponsorId])                  // Foreign key index
  @@index([isActive])                   // Active sponsorships
  @@index([startDate])                  // Sponsorships by start date
  @@index([endDate])                    // Expired sponsorships
  @@index([childId, isActive])          // Active sponsorships per child
  @@index([sponsorId, isActive])        // Active sponsorships per sponsor
  @@index([isActive, startDate])        // Active sponsorships by date
  @@index([paymentMethod])              // Group by payment method
  @@index([monthlyAmount])              // Sort/filter by amount
  
  @@unique([childId, sponsorId, isActive])
  @@map("sponsorships")
}

model Volunteer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  role      String   @default("volunteer")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Performance Indexes
  @@index([isActive])               // Filter active volunteers
  @@index([role])                   // Filter by role
  @@index([lastName, firstName])    // Name searches
  @@index([createdAt])              // Recent volunteers
  @@index([role, isActive])         // Active volunteers by role
  
  @@map("volunteers")
}